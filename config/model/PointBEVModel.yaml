_target_: cross_view_transformer.model.PointBEV.PointBEV

outputs:
  VEHICLE: [0, 1]
  PED: [1, 2]
  STATIC: [2, 3]
  DIVIDER: [3, 4]
  CROSSING: [4, 5]
  WALKWAY: [5, 6]
  CARPARK: [6, 7]
  # center: [1, 2]
  # offset: [2, 4]

dim_last: 128
mode: dense

backbone:

  _target_: cross_view_transformer.model.backbones.efficientnet.EfficientNet_PointBEV

  # model_name: efficientnet-b4
  # layer_names: ['reduction_3', 'reduction_4']

  # _target_: cross_view_transformer.model.backbones.timm_backbones.ResNet50
  # out_indices: [1,2,3,4]
  # fpn: True
  # # freeze_layers: [layer1, layer2]
  # embed_dims: ${model.dim_last}

  image_height: ${data.image.h}
  image_width: ${data.image.w}

neck:
  _target_: cross_view_transformer.model.backbones.agp.AGPNeck

  align_res_layer:
    _target_: cross_view_transformer.model.backbones.agp.AlignRes
    mode: "upsample"
    scale_factors: [1, 2]

  prepare_c_layer:
    _target_: cross_view_transformer.model.backbones.agp.PrepareChannel

    in_channels: [56, 160]
    mode: "doubleconv"
    tail_mode: "conv2d"

decoder:
  _target_: cross_view_transformer.model.sparse_resnet.SparseUNet

  in_c: ${model.dim_last}
  out_c: ${model.dim_last}

  # _target_: cross_view_transformer.model.decoder.SimpleBEVDecoder
  # in_channels: 128
